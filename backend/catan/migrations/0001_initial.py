# Generated by Django 2.2.6 on 2019-11-04 12:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
            options={
                'ordering': ['id'],
                'unique_together': {('id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_board', to='catan.Board')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('turn', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('colour', models.CharField(choices=[('yellow', 'YELLOW'), ('blue', 'BLUE'), ('green', 'GREEN'), ('red', 'RED')], max_length=50)),
                ('development_cards', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('resources_cards', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('victory_points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catan.Game')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VertexPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('index', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(29)])),
            ],
            options={
                'ordering': ['level'],
                'unique_together': {('level', 'index')},
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('max_players', models.IntegerField(default=4, validators=[django.core.validators.MinValueValidator(4), django.core.validators.MaxValueValidator(4)])),
                ('game_id', models.IntegerField(blank=True, null=True)),
                ('board_id', models.IntegerField()),
                ('game_has_started', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(blank=True, related_name='room_players', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Road',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='road_game', to='catan.Game')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roads', to='catan.Player')),
                ('vertex_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vertex_position1', to='catan.VertexPosition')),
                ('vertex_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vertex_position2', to='catan.VertexPosition')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_name', models.CharField(choices=[('brick', 'BRICK'), ('lumber', 'LUMBER'), ('wool', 'WOOL'), ('grain', 'GRAIN'), ('ore', 'ORE')], max_length=6)),
                ('last_gained', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catan.Game')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catan.Player')),
            ],
        ),
        migrations.CreateModel(
            name='HexePosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('index', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
            ],
            options={
                'ordering': ['level'],
                'unique_together': {('level', 'index')},
            },
        ),
        migrations.CreateModel(
            name='Hexe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('terrain', models.CharField(choices=[('desert', 'DESERT'), ('brick', 'BRICK'), ('lumber', 'LUMBER'), ('wool', 'WOOL'), ('grain', 'GRAIN'), ('ore', 'ORE')], max_length=6)),
                ('token', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(12)])),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_hexe', to='catan.Board')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hexe_position', to='catan.HexePosition')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='game',
            name='robber',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='robber', to='catan.HexePosition'),
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_winner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Current_Turn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dices1', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('dices2', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('game', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_turn', to='catan.Game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_name', models.CharField(choices=[('road_building', 'ROAD_BUILDING'), ('year_of_plenty', 'YEAR_OF_PLENTY'), ('monopoly', 'MONOPOLY'), ('victory_point', 'VICTORY_POINT'), ('knight', 'KNIGHT')], max_length=50)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catan.Game')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catan.Player')),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('settlement', 'SETTLEMENT'), ('city', 'CITY')], max_length=50)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='building_game', to='catan.Game')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buildings', to='catan.Player')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='position', to='catan.VertexPosition')),
            ],
        ),
        migrations.AddConstraint(
            model_name='road',
            constraint=models.UniqueConstraint(fields=('vertex_1', 'vertex_2', 'game'), name='One Road per vertex in game'),
        ),
        migrations.AddConstraint(
            model_name='player',
            constraint=models.UniqueConstraint(fields=('username', 'game'), name='User in one game at time'),
        ),
        migrations.AddConstraint(
            model_name='player',
            constraint=models.UniqueConstraint(fields=('turn', 'game'), name='User with unique turn per game'),
        ),
        migrations.AddConstraint(
            model_name='player',
            constraint=models.UniqueConstraint(fields=('colour', 'game'), name='User with unique colour per game'),
        ),
        migrations.AlterUniqueTogether(
            name='hexe',
            unique_together={('board', 'position')},
        ),
        migrations.AlterUniqueTogether(
            name='game',
            unique_together={('id', 'name')},
        ),
        migrations.AddConstraint(
            model_name='building',
            constraint=models.UniqueConstraint(fields=('position', 'game'), name='One building per position in game'),
        ),
    ]
